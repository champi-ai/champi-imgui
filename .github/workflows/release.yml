name: Release

on:
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      bump_type:
        description: 'Version bump type'
        required: true
        type: choice
        options:
          - auto
          - patch
          - minor
          - major
        default: 'auto'
      dry_run:
        description: 'Dry run (skip release creation)'
        required: false
        type: boolean
        default: false

permissions:
  contents: write

jobs:
  release:
    name: Bump version and create release
    if: "!startsWith(github.event.head_commit.message, 'bump:')"
    runs-on: ubuntu-latest

    steps:
    - name: Check out
      uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
      with:
        fetch-depth: 0
        token: ${{ secrets.RELEASE_TOKEN }}

    - name: Set up Python
      uses: actions/setup-python@0b93645e9fea7318ecaed2b359559ac225c90a2b # v5.3.0
      with:
        python-version: '3.12'

    - name: Install commitizen
      run: pip install commitizen

    - name: Configure Git
      run: |
        git config --local user.name "Divagnz"
        git config --local user.email "oscar.liguori.bagnis@gmail.com"
        git config --local pull.rebase true

    - name: Run commitizen bump
      id: cz
      run: |
        # Get previous version
        PREV_REV=$(cz version --project)
        echo "Previous version: $PREV_REV"

        # Determine bump command based on trigger type
        BUMP_CMD="cz --no-raise 21 bump --yes --changelog"

        # If manually triggered with specific bump type, use it
        if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
          BUMP_TYPE="${{ github.event.inputs.bump_type }}"
          if [[ "$BUMP_TYPE" != "auto" ]]; then
            BUMP_CMD="cz bump --yes --changelog --increment $BUMP_TYPE"
          fi
          echo "Manual trigger with bump_type: $BUMP_TYPE"
        fi

        # Run commitizen bump
        # --no-raise 21: Don't fail on "No commits to bump" (exit code 21)
        eval $BUMP_CMD

        # Get new version
        REV=$(cz version --project)
        echo "New version: $REV"
        echo "version=v${REV}" >> $GITHUB_OUTPUT

        # Store whether version changed for later steps
        if [[ "$REV" != "$PREV_REV" ]]; then
          echo "version_changed=true" >> $GITHUB_OUTPUT
        else
          echo "version_changed=false" >> $GITHUB_OUTPUT
        fi

        # Extract incremental changelog for this version
        if [[ "$REV" != "$PREV_REV" ]]; then
          # Special handling for v0.0.0 (no previous version exists)
          if [[ "$PREV_REV" == "0.0.0" ]]; then
            echo "## v${REV}" > body.md
            echo "" >> body.md
            echo "Initial release" >> body.md
            echo "" >> body.md
            echo "See [CHANGELOG.md](CHANGELOG.md) for full details." >> body.md
          else
            # Extract changelog between versions
            sed -n "/## v${REV}/,/## v${PREV_REV}/p" CHANGELOG.md | sed '$d' > body.md

            # If body.md is empty, fall back to using the entire new version section
            if [[ ! -s body.md ]]; then
              sed -n "/## v${REV}/,/## /p" CHANGELOG.md | sed '$d' > body.md
            fi

            # If still empty, use a default message
            if [[ ! -s body.md ]]; then
              echo "Release v${REV}" > body.md
              echo "" >> body.md
              echo "See [CHANGELOG.md](CHANGELOG.md) for details." >> body.md
            fi
          fi

          echo "Incremental changelog:"
          cat body.md

          # Push commit and tags using authenticated URL (skip if dry run)
          if [[ "${{ github.event.inputs.dry_run }}" != "true" ]]; then
            git push https://Divagnz:${{ secrets.RELEASE_TOKEN }}@github.com/${{ github.repository }}.git HEAD:main --tags
          else
            echo "Dry run mode: skipping git push"
          fi
        else
          echo "No version change, skipping release"
          echo "No changes" > body.md
        fi

    - name: Print Version
      run: echo "Bumped to version ${{ steps.cz.outputs.version }}"

    - name: Install uv
      uses: astral-sh/setup-uv@38f3f104447c67c051c4a08e39b64a148898af3a # v4.2.0

    - name: Set up Python for build
      run: uv python install 3.12

    - name: Build package
      if: steps.cz.outputs.version_changed == 'true' && github.event.inputs.dry_run != 'true'
      run: uv build

    - name: Create GitHub Release
      if: steps.cz.outputs.version_changed == 'true' && github.event.inputs.dry_run != 'true'
      uses: softprops/action-gh-release@6da8fa9354ddfdc4aeace5fc48d7f679b5214090 # v2.4.1
      with:
        body_path: body.md
        tag_name: ${{ steps.cz.outputs.version }}
        files: dist/*
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
